import { DeploymentFile } from './hashes';
import { FetchOptions } from '@zeit/fetch';
import ignore from 'ignore';
declare type Ignore = ReturnType<typeof ignore>;
import { NowClientOptions, DeploymentOptions, NowConfig } from '../types';
export declare const API_FILES = "/v2/now/files";
export declare const API_DELETE_DEPLOYMENTS_LEGACY = "/v2/now/deployments";
declare const EVENTS_ARRAY: readonly ["hashes-calculated", "file-count", "file-uploaded", "all-files-uploaded", "created", "building", "ready", "alias-assigned", "warning", "error", "notice", "tip", "canceled"];
export declare type DeploymentEventType = (typeof EVENTS_ARRAY)[number];
export declare const EVENTS: Set<"warning" | "error" | "hashes-calculated" | "file-count" | "file-uploaded" | "all-files-uploaded" | "created" | "building" | "ready" | "alias-assigned" | "notice" | "tip" | "canceled">;
export declare function getApiDeploymentsUrl(metadata?: Pick<DeploymentOptions, 'version' | 'builds' | 'functions'>): "/v3/now/deployments" | "/v10/now/deployments" | "/v12/now/deployments";
export declare function parseNowJSON(filePath?: string): Promise<NowConfig>;
export declare function getVercelIgnore(cwd: string | string[]): Promise<{
    ig: Ignore;
    ignores: string[];
}>;
interface FetchOpts extends FetchOptions {
    apiUrl?: string;
    method?: string;
    teamId?: string;
    headers?: {
        [key: string]: any;
    };
    userAgent?: string;
}
export declare const fetch: (url: string, token: string, opts?: FetchOpts, debugEnabled?: boolean | undefined, useNodeFetch?: boolean | undefined) => Promise<any>;
export interface PreparedFile {
    file: string;
    sha: string;
    size: number;
    mode: number;
}
export declare const prepareFiles: (files: Map<string, DeploymentFile>, clientOptions: NowClientOptions) => PreparedFile[];
export declare function createDebug(debug?: boolean): (...logs: string[]) => void;
export {};
